{"version":3,"sources":["model.ts","components/atlas/AtlasGrid.tsx","components/atlas/AtlasNode.tsx","components/atlas/utils.ts","components/atlas/GhostNode.tsx","utils/utils.ts","components/atlas/DraggableLinkMarker.tsx","components/atlas/AtlasLink.tsx","components/atlas/Atlas.tsx","components/generic/Icon.tsx","components/toolbars/SelectColor.tsx","components/toolbars/ToolbarHeader.tsx","components/toolbars/EditPathway.tsx","components/toolbars/SelectOrCreatePathway.tsx","components/toolbars/ImportData.tsx","components/generic/Panel.tsx","components/toolbars/EditNode.tsx","components/Toolbar.tsx","components/generic/UndoButtons.tsx","components/App.tsx","reducers/model.tsx","utils/history.ts","reducers/toolbar.tsx","reducers/atlas.tsx","reducers/rootReducer.tsx","index.tsx","utils/persistence.ts","config.tsx"],"names":["initialModel","pathways","nodes","links","Colors","getIds","obj","Object","keys","map","k","parseInt","newId","ids","length","Math","max","apply","toConsumableArray","initialState","transform","d3","scale","snapToGrid","coords","x","round","y","AtlasGrid","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","svg","gridPattern","container","state","objectSpread","React","createRef","_this2","console","assert","current","on","pos","invert","dispatch","type","zoom","clickDistance","setState","onClick","toString","attr","react_default","a","createElement","ref","style","id","width","height","patternUnits","d","fill","stroke","strokeWidth","children","Component","AtlasNodeComponent","dragPosition","undefined","el","drag","_this2$props","node","oldNode","setPosition","stopPropagation","dragging","className","opacity","cx","cy","r","connect","GhostNode","_ref","unreachable","_","Error","DraggableLinkMarker","updatePosition","color","lineGenerator","curve","c","GenericLink","points","model","present","_ref2","link","cursor","src","dst","intermediates","srcCoords","dstCoords","concat","pathway","AtlasLink_GenericLink","i","atlas_DraggableLinkMarker","key","newIntermediates","slice","newLink","ui","atlas","mode","onClickNode","editNode","AtlasGrid_AtlasGrid","_ref3","slicedToArray","AtlasLink","_ref4","_ref5","AtlasNode","shouldRenderGhostNode","Icon","spanClass","join","react_fontawesome_index_es","icon","size","iconSize","SelectColor","borderColor","selected","borderWidth","e","faCircle","ToolbarHeader","goBack","faArrowLeft","title","EditPathway","existingPathway","oldState","name","noNameError","noColorError","handleChange","bind","assertThisInitialized","handleSubmit","setColor","event","target","value","trim","preventDefault","error","onSubmit","display","placeholder","onChange","faExclamationTriangle","faPlus","submitButtonText","onDelete","faMinusCircle","SelectOrCreatePathway","PathwayItem","assign","selectPathway","onSelect","onCreate","ImportData","input","handleUpload","files","reader","FileReader","onabort","log","onerror","onload","result","JSON","parse","setModel","readAsText","acceptedFiles","padding","faUpload","PanelItem","text","Panel","heading","panelItems","Panel_PanelItem","EditNode","prevProps","stateToProps","toolbar","dispatchToProps","Home","faBoxes","faBezierCurve","faPlusCircle","faEdit","faDownload","json","blob","Blob","stringify","saveAs","downloadJSON","Panel_Panel","SelectNodeLocation","CreateNode","EditNode_EditNode","EditNodeToolbar","CreatePathway","EditPathway_EditPathway","SelectPathwayToEdit","_ref6","EditThisPathway","_ref7","ImportDataAction","_ref8","ImportData_ImportData","SelectPathwayForLink","_ref9","CreateLink","_ref10","Toolbar","_ref11","UndoButtons","undo","disabled","canUndo","faUndo","redo","canRedo","faRedo","App","atlas_Atlas","position","top","left","maxWidth","right","past","future","config","reducer","arguments","msg","data","push","pop","_history","nextState","history","isEqual","overflow","limit","undoable","createNode","updateNode","linkID","deleteNode","createPathway","updatePathway","deletePathway","createLink","updateLink","deleteLink","initialMode","Normal","SelectLinkSource","SelectLinkTarget","rootReducer","combineReducers","LocalDB","DB_NAME","PERSIST_DATA_TIMEOUT","isDirty","cache","persistData","localStorage","setItem","put","setTimeout","get","savedState","getItem","LocalDBFactory","store","createStore","subscribe","getState","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.002241cd.chunk.js","sourcesContent":["/**\n * This file defines the types for our data model and the methods for modifying\n * it. Since we are using Redux, it must be kept immutable and all the methods\n * return new objects.\n */\n\n /**** TYPES ****/\n\nexport const initialModel : Model = {\n    pathways : {},\n    nodes    : {},\n    links    : {},\n}\n\nexport interface Model {\n    readonly pathways : Pathways,\n    readonly nodes    : Nodes,\n    readonly links    : Links\n}\n\nexport type Pathways = Indexable<Pathway>\nexport type Nodes = Indexable<Node>\nexport type Links = Indexable<Link>\n\nexport interface Indexable<T> {\n    readonly [id : number] : T\n}\n\nexport interface Node {\n    readonly name : string,\n    readonly coords : Coords\n}\n\nexport interface Link {\n    readonly src : NodeId,\n    readonly dst : NodeId,\n    readonly intermediates : Coords[],\n    readonly pathway : PathwayId\n}\n\nexport interface Pathway {\n    readonly name : string,\n    readonly color : Color\n}\n\n/** A partially intitialized link. Useful for when the user is initializing\n * the link over time.\n */\nexport interface PartialLink {\n    readonly src : NodeId,\n    readonly dst : undefined,\n    readonly intermediates : Coords[],\n    readonly pathway : PathwayId\n}\n\n/** This type should hold coordinates in \"absolute position\", i.e. according to\n * their distance in tile units from 0, 0. By storing data in this generic format,\n * we can change the tile size without changing the semantics of existing data.\n */\nexport interface Coords {\n    readonly x : number,\n    readonly y : number\n};\n\nexport type Color                  =  'light-blue' | 'purple' | 'light-green' | 'red' | 'orange-yellow';\nexport const Colors : Array<Color> = ['light-blue' , 'purple' , 'light-green' , 'red' , 'orange-yellow'];\n\nexport type NodeId = number;\nexport type LinkId = number;\nexport type PathwayId = number;\n\nexport type Handler<A> = (a : A) => void;\nexport type Handler2<A,B> = (a : A, b : B) => void;\n\n\n/**** ACCESSOR FUNCTIONS ****/\n\n\nexport function getIds<T>(obj : Indexable<T>) : Array<number> {\n    return Object.keys(obj).map((k : string) => parseInt(k));\n}\n\nfunction newId<T>(obj : Indexable<T>) : number {\n    const ids = getIds(obj);\n    if (ids.length === 0) {\n        return 1;\n    }\n    else {\n        return 1 + Math.max(...ids);\n    }\n}\n\n\n/**\n * Return a list of all nodes in the model, each with an `id` field\n * containing their id.\n */\nexport function nodes(model : Model) : [NodeId,Node][] {\n    return getIds(model.nodes).map((id) => {\n        return [id, model.nodes[id]];\n    });\n}\n\n/**\n * Return a list of all links in the model, each with an `id` field\n * containing their id.\n */\nexport function links(model : Model) : [LinkId, Link][] {\n    return getIds(model.links).map((id) => {\n        return [id, model.links[id]];\n    });\n}\n\n/**\n * Return a list of all pathways in the model, each with an `id` field\n * containing their id.\n */\nexport function pathways(model : Model) : [PathwayId, Pathway][] {\n    return getIds(model.pathways).map((id) => {\n        return [id, model.pathways[id]];\n    });\n}\n\n\n/**** UPDATE FUNCTIONS ****/\n\n\nexport function createPathway(pathway : Pathway, model : Model) : Model {\n    const id = newId(model.pathways);\n    let pathways = { ...model.pathways };\n    pathways[id] = pathway;\n\n    return { ...model, pathways };\n}\n\nexport function updatePathway(id : PathwayId, pathway : Pathway, model : Model) : Model {\n    let pathways = { ...model.pathways };\n    pathways[id] = pathway;\n\n    return { ...model, pathways };\n}\n\nexport function deletePathway(id : PathwayId, model : Model) : Model {\n    let pathways = { ...model.pathways };\n    delete pathways[id];\n\n    // Filter out all links belonging to this pathway\n    let links : { [id : number] : Link } = {};\n    for (let linkID in model.links) {\n        const link = model.links[linkID];\n        if (link.pathway !== id) {\n            links[linkID] = link;\n        }\n    }\n\n    return { ...model, links, pathways };\n}\n\nexport function createNode(node : Node, model : Model) : Model {\n    const id = newId(model.nodes);\n    let nodes = { ...model.nodes };\n    nodes[id] = node;\n\n    return { ...model, nodes };\n}\n\nexport function updateNode(id : NodeId, node : Node, model : Model) : Model {\n    let nodes = { ...model.nodes };\n    nodes[id] = node;\n\n    return { ...model, nodes };\n}\n\nexport function deleteNode(id : NodeId, model : Model) : Model {\n    let nodes = { ...model.nodes };\n    delete nodes[id];\n\n    // Remove all links involving this node\n    let links : { [id : number] : Link } = {};\n    for (let linkID in model.links) {\n        const link = model.links[linkID];\n        if (link.src !== id && link.src !== id) {\n            links[linkID] = link;\n        }\n    }\n\n    return { ...model, nodes, links };\n}\n\nexport function createLink(link : Link, model : Model) : Model {\n    const id = newId(model.links);\n    let links = { ...model.links };\n    links[id] = link;\n\n    return { ...model, links };\n}\n\nexport function updateLink(id : LinkId, link : Link, model : Model) : Model {\n    let links = { ...model.links };\n    links[id] = link;\n\n    return { ...model, links };\n}\n\nexport function deleteLink(id : LinkId, model : Model) : Model {\n    let links = { ...model.links };\n    delete links[id];\n\n    return { ...model, links };\n}","import React, { RefObject } from 'react';\nimport * as d3 from 'd3';\nimport { Msg } from '../../actions';\nimport { Coords } from '../../model';\n\ninterface Props {\n    style : React.CSSProperties,\n    dispatch : (msg : Msg) => void,\n    children : React.ReactNode,\n    onClick? : () => void\n}\n\nconst INITIAL_SCALE = 1;\n\ninterface State {\n    // The current \"zoom state\" of the map.\n    transform : d3.ZoomTransform,\n}\n\nconst initialState : State = {\n    transform : d3.zoomIdentity.scale(INITIAL_SCALE)\n}\n\nexport function snapToGrid(coords : Coords) : Coords {\n    return { \n        x : Math.round(coords.x / 100) * 100, \n        y : Math.round(coords.y / 100) * 100 \n    };\n}\n\n\nexport default class AtlasGrid extends React.Component<Props, State> {\n    svg         : RefObject<SVGSVGElement>\n    gridPattern : RefObject<SVGPatternElement>\n    container   : RefObject<SVGGElement>\n\n\n    constructor(props : Props) {\n        super(props);\n        this.state = {...initialState};\n        this.svg         = React.createRef();\n        this.gridPattern = React.createRef();\n        this.container   = React.createRef();\n    }\n\n    componentDidMount() { \n        console.assert(this.svg.current !== null);\n        const svg = d3.select(this.svg.current);\n\n        // Subscribe to the mouse position and store it in `this.state.cursor`\n        svg.on(\"mousemove\", () => {\n            // Get zoom-invariant mouse position\n            const pos = this.state.transform.invert(d3.mouse(this.svg.current as any));\n            // Scale coordinates according to tile size\n            const coords = { \n                x : pos[0],\n                y : pos[1]\n            };\n            this.props.dispatch({ type : 'set mouse position', coords });\n        });\n\n        // Add zoom functionality to the SVG\n        const zoom = d3.zoom()\n            //.scaleExtent([0.1, 10])\n            .clickDistance(5)\n            .on(\"zoom\", () => {\n                this.setState({\n                    transform: d3.event.transform.scale(INITIAL_SCALE)\n                });\n            });\n        svg.call(zoom as any);\n        // Don't permit \"double-click to zoom\"\n        svg.on(\"dblclick.zoom\", null);\n    }\n\n    componentDidUpdate() { \n        const svg         = d3.select(this.svg.current);\n        const container   = d3.select(this.container.current);\n        const gridPattern = d3.select(this.gridPattern.current);\n\n        // Update the click listener or set it to a no-op\n        const noop = () => {};\n        svg.on(\"click\", this.props.onClick || noop);\n\n        // Apply the current transform state to both the grid and all child elements\n        const transform = this.state.transform.toString();\n        gridPattern.attr(\"patternTransform\", transform);\n        container.attr(\"transform\", transform);\n    }\n\n    render() {\n        return (\n            <svg ref={this.svg} style={this.props.style}>\n                <defs>\n                    <pattern ref={this.gridPattern} id=\"atlas-grid-pattern\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\">\n                        <path d={`M 100 0 L 0 0 0 100`} fill=\"none\" stroke=\"gray\" strokeWidth=\"1\" />\n                    </pattern>\n                </defs>\n\n                <rect width=\"100%\" height=\"100%\" fill=\"url(#atlas-grid-pattern)\" />\n\n                <g ref={this.container}>\n                    {this.props.children}\n                </g>\n            </svg>\n        );\n     }\n}","import React, { RefObject } from 'react';\nimport { Coords, NodeId, Node } from '../../model';\nimport * as d3 from 'd3';\nimport { Dispatch } from 'redux';\nimport { ModelMsg } from '../../actions';\nimport { State as GlobalState } from '../App';\nimport { snapToGrid } from './AtlasGrid';\nimport { connect } from 'react-redux';\nimport { getMouseCoords } from './utils';\n\nexport interface Props {\n    id : NodeId\n    node : Node,\n    onClick? : () => void,\n    dispatch : Dispatch<ModelMsg>\n}\n\ninterface State {\n    // If the node is being dragged, this field will hold the mouse coordinates\n    dragPosition : undefined | Coords\n}\n\n/**\n * Create an action which updates the given node's coordinates.\n */\nfunction setPosition(id : NodeId, oldNode : Node, coords : Coords) : ModelMsg {\n    // Note that d3 automatically adjusts these x,y coordinates to the zoom\n    // of the svg element\n    const node = { ...oldNode, coords };\n\n    return { 'type' : 'update node', id, node };\n}\n\n/**\n * A draggable node to be rendered on the atlas.\n * Dragging causes the node to dispatch actions that change the node's position.\n */\nclass AtlasNodeComponent extends React.Component<Props,State> {\n\n    ref : RefObject<SVGCircleElement>\n\n    constructor(props : Props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = { dragPosition : undefined };\n    }\n\n    componentDidMount() {\n        console.assert(this.ref.current !== null);\n\n        // Set the drag handler for this node\n        const el = d3.select(this.ref.current);\n        const drag = d3.drag()\n            .clickDistance(5)\n            .on('drag', () => {\n                this.setState({ dragPosition : snapToGrid(getMouseCoords()) });\n            })\n            .on('end', () => {\n                const { dispatch, id, node } = this.props;\n                const { dragPosition } = this.state;\n                if (dragPosition !== undefined) {\n                    dispatch(setPosition(id, node, dragPosition));\n                    this.setState({ dragPosition : undefined });\n                } \n            });\n        el.call(drag as any);\n\n        el.on('click', () => {\n            if (this.props.onClick) this.props.onClick();\n            d3.event.stopPropagation();\n        });\n    }\n\n    render() {\n        const coords = this.state.dragPosition || this.props.node.coords;\n        const dragging = this.state.dragPosition !== undefined;\n\n        return <circle \n            className = { \"node\" }\n            opacity = { dragging ? 0.5 : 1 }\n            ref = { this.ref }\n            cx = { coords.x } \n            cy = { coords.y }\n            r = { 20 }\n        />;\n    }\n}\n\n\n\nexport default connect(stateToProps, dispatchToProps)(AtlasNodeComponent);\n\nfunction stateToProps(state : GlobalState) : {} {\n    return { };\n}\n\nfunction dispatchToProps(dispatch : Dispatch<ModelMsg>) : Pick<Props, 'dispatch'>{\n    return { dispatch };\n}","import { Coords } from \"../../model\";\nimport * as d3 from 'd3';\n\n\n/**\n * Returns the current zoom-invariant coordinates of the mouse.\n */\nexport function getMouseCoords() : Coords {\n    return { x : d3.event.x, y : d3.event.y };\n}","import React from 'react';\nimport { Coords } from '../../model';\n\nexport interface GhostNodeProps {\n    coords  : Coords,\n}\n\nexport default ({ coords } : GhostNodeProps) => (\n    <circle \n        opacity = { 0.5 }\n        cx = { coords.x } \n        cy = { coords.y }\n        r = { 20 }\n    />\n);","\n/** Returns a deep copy of the given JSON object. */\nexport function deepCopy(obj : Object) {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/** Useful for making the Typescript compiler check for exhaustiveness\n * of switch statements.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#exhaustiveness-checking\n */\nexport function unreachable(_ : never): never {\n    throw new Error(\"A `switch` statement failed to account for all possibilities\");\n}","import React, { RefObject } from 'react';\nimport { Coords, Color } from '../../model';\nimport * as d3 from 'd3';\nimport { snapToGrid } from './AtlasGrid';\n\nexport interface Props {\n    coords : Coords,\n    color : Color,\n    updatePosition : (coords : Coords) => void\n}\n\ninterface State {\n    // If the node is being dragged, this field will hold the mouse coordinates\n    dragPosition : undefined | Coords\n}\n\n\n/**\n * Returns the current zoom-invariant coordinates of the mouse.\n */\nfunction getMouseCoords() : Coords {\n    return { x : d3.event.x, y : d3.event.y };\n}\n\n/**\n * A draggable link marker to be rendered on the atlas.\n * Dragging causes the node to dispatch actions that change the node's position.\n */\nclass DraggableLinkMarker extends React.Component<Props,State> {\n\n    ref : RefObject<SVGCircleElement>\n\n    constructor(props : Props) {\n        super(props);\n        this.ref = React.createRef();\n        this.state = { dragPosition : undefined };\n    }\n\n    componentDidMount() {\n        console.assert(this.ref.current !== null);\n\n        // Set the drag handler for this node\n        const el = d3.select(this.ref.current);\n        const drag = d3.drag()\n            .clickDistance(5)\n            .on('drag', () => {\n                this.setState({ dragPosition : snapToGrid(getMouseCoords()) });\n            })\n            .on('end', () => {\n                const { dragPosition } = this.state;\n                if (dragPosition !== undefined) {\n                    this.props.updatePosition(dragPosition);\n                    this.setState({ dragPosition : undefined });\n                } \n            });\n        el.call(drag as any);\n    }\n\n    render() {\n        const coords = this.state.dragPosition || this.props.coords;\n        const dragging = this.state.dragPosition !== undefined;\n\n        return <circle\n            className = { \"marker has-color-\" + this.props.color }\n            opacity = { dragging ? 0.5 : 1 }\n            ref = { this.ref }\n            cx = { coords.x }\n            cy = { coords.y }\n            r = { 10 }\n        />;\n    }\n}\n\nexport default DraggableLinkMarker;","import React from 'react';\nimport { Coords, Link, Model, LinkId, PartialLink, Color } from '../../model';\nimport * as d3 from 'd3';\nimport { Dispatch } from 'redux';\nimport { ModelMsg } from '../../actions';\nimport { State as GlobalState } from '../App';\nimport { connect } from 'react-redux';\nimport DraggableLinkMarker from './DraggableLinkMarker';\nimport { getMouseCoords } from './utils';\n\nexport interface Props {\n    id? : LinkId,\n    link : Link | PartialLink,\n    cursor? : Coords,\n    model : Model,\n    dispatch : Dispatch<ModelMsg>\n}\n\n/** \n * The generator takes a list of coordinates and returns path data for \n * a curve passing through them.\n */\nconst lineGenerator : d3.Line<Coords> = \n    d3.line<Coords>()\n        .curve(d3.curveCardinal)\n        .x(c => c.x)\n        .y(c => c.y);\n\n/**\n * Renders a link, given a set of points to pass through.\n */\nconst GenericLink = ({ points, color } : { points : Coords[], color : Color }) => (\n    <path \n        className = { \"has-stroke-\" + color }\n        d = { lineGenerator(points) || undefined }\n        fill = \"transparent\"\n        strokeWidth = \"10\"\n    />\n);\n\n/**\n * Renders a specific link and its intermediate points.\n */\nconst AtlasLinkComponent = ({ id, link, model, cursor, dispatch } : Props) => {\n    const { src, dst, intermediates } = link;\n    const srcCoords = model.nodes[src].coords;\n    const dstCoords = dst ? model.nodes[dst].coords : cursor!;\n    // The list of intermediate points for the line, starting from the\n    // source coordinates, passing through all intermediate coordinates,\n    // and finally reaching the destination node coordinates.\n    const points : Coords[] = ([] as Coords[]).concat([srcCoords], intermediates, [dstCoords]);\n\n    const color = model.pathways[link.pathway].color;\n\n    // Updates the coordinates of the i-th intermediate marker\n    function updatePosition(coords : Coords, i : number) {\n        if (id && link.dst) {\n            const newIntermediates = intermediates.slice();\n            newIntermediates[i] = coords;\n            const newLink = { ...link, intermediates : newIntermediates };\n            dispatch({ type : 'update link', link : newLink, id });\n        }\n    }\n\n    return (<g>\n        <GenericLink points={points} color={color} />\n        { intermediates.map((coords, i) => \n            <DraggableLinkMarker \n                key={id + \"-\" + i}\n                color={color}\n                coords={coords} \n                updatePosition={c => updatePosition(c, i)}\n            />\n        ) }\n    </g>);\n};\n\nexport default connect(stateToProps, dispatchToProps)(AtlasLinkComponent);\n\nfunction stateToProps(state : GlobalState) : Pick<Props,'model'> {\n    return { model : state.model.present };\n}\n\nfunction dispatchToProps(dispatch : Dispatch<ModelMsg>) : Pick<Props,'dispatch'> {\n    return { dispatch };\n}","import React from 'react';\nimport { Coords, Model, nodes, NodeId, links, PathwayId, PartialLink, Link } from '../../model';\nimport { Msg } from '../../actions';\nimport { State as GlobalState } from '../App';\nimport { Dispatch } from 'redux';\nimport AtlasGrid, { snapToGrid } from './AtlasGrid';\nimport AtlasNode from './AtlasNode';\nimport GhostNode from './GhostNode';\nimport { connect } from 'react-redux';\nimport { unreachable } from '../../utils/utils';\nimport AtlasLink from './AtlasLink';\nimport { getMouseCoords } from './utils';\n\n\ninterface Props {\n    state : State,\n    style : React.CSSProperties,\n    model : Model,\n    dispatch : (msg : Msg) => void\n}\n\nexport type Mode \n    = { type : 'Normal' }\n    | { type : 'CreateNode' }\n    | { type : 'SelectLinkSource', pathway : PathwayId }\n    | { type : 'SelectLinkTarget', link : PartialLink }\n\nexport interface State {\n    mode : Mode,\n    cursor? : Coords\n}\n\nfunction Atlas({ style, state, dispatch, model } : Props) {\n    const { cursor, mode } = state;\n\n    const pickNodeLocation = () => {\n        if (cursor)\n            dispatch({ \n                type : 'prompt to create node with coords', \n                coords : snapToGrid(cursor)\n            });\n    };\n    const editNode = (id : NodeId) => {\n        dispatch({ type: 'prompt to edit node', id });\n    };\n\n    const onClickGrid = () => {\n        switch (mode.type) {\n            case 'CreateNode':\n                return pickNodeLocation();\n\n            case 'SelectLinkTarget':\n                // Add this location to the list of intermediate points\n                const intermediates = ([] as Array<Coords>).concat(\n                    mode.link.intermediates, \n                    [snapToGrid(state.cursor!)]\n                );\n                const link = { ...mode.link, intermediates };\n                return dispatch({ type : 'prompt to select link target', link })\n\n            case 'SelectLinkSource':\n            case 'Normal':\n                return;\n        }\n        return unreachable(mode);\n    };\n\n    const onClickNode = (id : NodeId) => () => {\n        switch (mode.type) {\n            case 'Normal':\n                return editNode(id);\n            case 'CreateNode':\n                return;\n            case 'SelectLinkSource':\n                return dispatch({ \n                    type : 'prompt to select link target', \n                    link : { \n                        src : id, \n                        dst : undefined, \n                        pathway : mode.pathway, \n                        intermediates : [] \n                    }\n                });\n            case 'SelectLinkTarget':\n                dispatch({ type : 'create link', link : { ...mode.link, dst : id } });\n                dispatch({ type : 'prompt to select link source', pathway : mode.link.pathway });\n                return;\n        }\n        return unreachable(mode);\n    };\n\n    const shouldRenderGhostNode = () => {\n        switch (mode.type) {\n            case 'CreateNode':\n                return true;\n        }\n        return false;\n    };\n\n    return (\n        <AtlasGrid style={style} dispatch={dispatch} onClick={ onClickGrid }>\n            {\n                links(model).map(([id, link]) =>\n                    <AtlasLink key={id} id={id} link={link} />\n                )\n            }\n            {\n                mode.type === 'SelectLinkTarget' &&\n                    <AtlasLink link={mode.link} cursor={cursor && snapToGrid(cursor)} />\n            }\n            { \n                nodes(model).map(([id, node]) => \n                    <AtlasNode key={id} id={id} node={node} onClick={ onClickNode(id) } />\n                )\n            }\n            {\n                cursor && shouldRenderGhostNode() &&\n                <GhostNode coords={ snapToGrid(cursor) } />\n            }\n        </AtlasGrid>\n    );\n}\n\nexport default connect(stateToProps, dispatchToProps)(Atlas);\n\nfunction stateToProps(state : GlobalState) : Pick<Props, 'state' | 'model'> {\n    return { \n        state : state.ui.atlas, \n        model : state.model.present \n    };\n}\n\nfunction dispatchToProps(dispatch : Dispatch<Msg>) : Pick<Props, 'dispatch'>{\n    return { dispatch };\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { Color } from '../../model';\n\ninterface Props {\n    icon : IconProp,\n    color? : Color,\n    container? : 'small' | 'medium' | 'large',\n    iconSize? : 'lg' | '2x' | '3x'\n}\n\nexport default function Icon(props : Props) {\n    const color    = props.color ? 'has-text-' + props.color : '';\n    const spanSize = props.container ? 'is-' + props.container : '';\n    const spanClass = ['icon', spanSize, color].join(' ');\n\n    return (<span className={spanClass}>\n                <FontAwesomeIcon icon={props.icon} size={props.iconSize} />\n            </span>);\n}\n                ","import React from 'react';\nimport { faCircle } from '@fortawesome/free-solid-svg-icons'\nimport {Color,Colors,Handler} from '../../model';\nimport Icon from '../generic/Icon';\n\ninterface Props {\n    selected? : Color,\n    onClick : Handler<Color>\n}\n\n\nexport default function SelectColor(props : Props) {\n    function style(color : Color) {\n        return {\n            borderColor: color === props.selected ? '#777' : 'transparent',\n            borderWidth: '2px'\n        }\n    }\n\n    return (<div className=\"buttons is-centered\">\n        {Colors.map((color) => \n            <button onClick={(e) => props.onClick(color)}\n              className=\"button is-hovered is-large\" key={color} type=\"button\" style={style(color)}>\n                <Icon icon={faCircle} color={color} container='medium' iconSize='2x' />\n            </button>)}\n    </div>)\n}","import React, { ReactNode } from 'react';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport { Handler } from '../../model';\nimport Icon from '../generic/Icon';\n\ninterface Props {\n    goBack : Handler<any>,\n    title : string,\n    children? : ReactNode\n}\n\nexport default function ToolbarHeader(props : Props) {\n    return (\n        <nav className=\"panel\">\n\n            <div className=\"panel-heading\">\n            <div className=\"level\">\n                <div className=\"level-left\">\n                    <div className=\"level-item\">\n                        <button className=\"button\" onClick={props.goBack}>\n                            <Icon icon={faArrowLeft} />\n                        </button>\n                    </div>\n                    <div className=\"level-item\">\n                        <p>{props.title}</p>\n                    </div>\n                </div>\n            </div>\n            </div>\n\n            {props.children}\n\n        </nav>);\n}","import React from 'react';\nimport { faPlus, faExclamationTriangle, faMinusCircle } from '@fortawesome/free-solid-svg-icons'\nimport { Color, Handler, Pathway } from '../../model';\nimport SelectColor from './SelectColor';\nimport Icon from '../generic/Icon';\nimport ToolbarHeader from './ToolbarHeader';\n\ninterface Props {\n    oldState? : Pathway,\n    onSubmit : Handler<Pathway>,\n    onDelete? : Handler<any>,\n    goBack : Handler<any>,\n    title : string,\n    submitButtonText : string,\n}\n\ninterface State {\n    name : string,\n    color? : Color,\n    noNameError : boolean,\n    noColorError : boolean,\n}\n\nexport default class EditPathway extends React.Component<Props, State> {\n    constructor(props : Props) {\n        super(props);\n\n        let existingPathway = this.props.oldState;\n        this.state = { \n            name: existingPathway ? existingPathway.name : \"\", \n            color: existingPathway ? existingPathway.color : undefined, \n            noNameError: false, noColorError: false \n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.setColor = this.setColor.bind(this);\n    }\n    handleChange(event : React.ChangeEvent<HTMLInputElement>) {\n        const name = event.target.value;\n\n        this.setState({ \n            name: name, \n            noNameError: this.state.noNameError && name.trim() === '',\n        });\n    }\n    setColor(color : Color) {\n        this.setState({ color: color, noColorError: false });\n    }\n    handleSubmit(event : React.FormEvent) {\n        event.preventDefault();\n\n        let error = false;\n        // Make sure the name is nonempty and a color is selected\n        if (this.state.color === undefined) {\n            this.setState({ noColorError: true });\n            error = true;\n        }\n        if (this.state.name.trim() === '') {\n            this.setState({ noNameError: true });\n            error = true;\n        }\n        if (!error) {\n            // Notice that if `color` were undefined then `error` would be true.\n            // Therefore we can assert it isn't undefined below.\n            this.props.onSubmit({\n                name: this.state.name.trim(),\n                color: this.state.color as Color\n            });\n        }\n    }\n    render() {\n        return (\n        <ToolbarHeader title={this.props.title} goBack={this.props.goBack}>\n\n            <form className=\"panel-block\" onSubmit={this.handleSubmit} style={{display: \"block\"}}>\n            <div className=\"field\">\n                <label className=\"label\">Name</label>\n                <div className=\"control\">\n                    <input className=\"input\" placeholder=\"Pathway name\" type=\"text\" value={this.state.name} onChange={this.handleChange} />\n                </div>\n                {this.state.noNameError && \n                    <p className=\"help is-danger\">\n                        <Icon icon={faExclamationTriangle} />\n                        Please enter a name for the pathway.\n                    </p> \n                }\n            </div>\n\n            <div className=\"field\">\n                <label className=\"label\">Color</label>\n                <SelectColor selected={this.state.color} onClick={this.setColor} />\n                {this.state.noColorError && \n                    <p className=\"help is-danger\">\n                        <Icon icon={faExclamationTriangle} />\n                        Please select a color for this pathway.\n                    </p> \n                }\n            </div>\n\n            <div className=\"buttons\">\n            <button className=\"button is-primary is-fullwidth\">\n                <Icon icon={faPlus} />\n                <span>{this.props.submitButtonText}</span>\n            </button>\n\n            { this.props.onDelete &&\n                <button className=\"button is-hover is-danger is-outlined is-fullwidth\" \n                        type=\"button\" onClick={this.props.onDelete!}>\n                    <Icon icon={faMinusCircle} />\n                    <span>Delete Pathway</span>\n                </button>\n            }\n            </div>\n        </form>\n        </ToolbarHeader>);\n    }\n}","import React from 'react';\nimport Icon from '../generic/Icon';\nimport { faCircle, faPlus } from '@fortawesome/free-solid-svg-icons'\nimport {Handler, Pathway, PathwayId, Pathways, getIds} from '../../model';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ToolbarHeader from './ToolbarHeader';\n\ninterface Props {\n    pathways : Pathways, \n    onCreate? : Handler<any>,\n    onSelect : Handler<PathwayId>,\n    goBack : Handler<any>,\n}\n\nexport default function SelectOrCreatePathway(props : Props) {\n    return (\n    <ToolbarHeader title=\"Pathways\" goBack={props.goBack}>\n\n        {getIds(props.pathways).map((id) => \n            <PathwayItem key={id} {...props.pathways[id]} selectPathway={_ => props.onSelect(id)} />\n        )}\n\n        {props.onCreate &&\n            <div className=\"panel-block\">\n                <button onClick={props.onCreate} type=\"button\" className=\"button is-white is-fullwidth\">\n                    <Icon icon={faPlus} />\n                    <span> Create a new pathway</span>\n                </button>\n            </div>\n        }\n\n    </ToolbarHeader>);\n}\n\nfunction PathwayItem(props : Pathway & { selectPathway : Handler<any> }) {\n    return (<label className=\"panel-block\" onClick={props.selectPathway}>\n                <span className={\"panel-icon has-text-\" + props.color}>\n                    <FontAwesomeIcon icon={faCircle} />\n                </span>\n                {props.name}\n            </label>);\n}","import React from 'react';\n// import Dropzone from 'react-dropzone';\nimport { faUpload } from '@fortawesome/free-solid-svg-icons'\nimport {Model, Handler} from '../../model';\nimport Icon from '../generic/Icon';\nimport ToolbarHeader from './ToolbarHeader';\n\ninterface Props extends Model {\n    goBack : Handler<any>,\n    setModel : Handler<Model>\n}\n\nexport default class ImportData extends React.Component<Props,{}> {\n    input : React.RefObject<HTMLInputElement>\n\n    constructor(props : Props) {\n        super(props);\n        this.input = React.createRef();\n        this.handleUpload = this.handleUpload.bind(this);\n    }\n\n    handleUpload(event : React.ChangeEvent<HTMLInputElement>) {\n        const f = this.input.current as HTMLInputElement;\n        const files = f.files as FileList;\n\n        const reader = new FileReader();\n        reader.onabort = () => console.log('file reading was aborted')\n        reader.onerror = () => console.log('file reading has failed')\n        reader.onload  = () => {\n            console.log(reader.result);\n            const model = JSON.parse(reader.result as string) as Model;\n            console.log(model);\n            this.props.setModel(model);\n        }\n        reader.readAsText(files[0]);\n    }\n\n    importFile<T extends File>(acceptedFiles : T[]) {\n    }\n\n\n    render() {\n        return (\n            <ToolbarHeader title=\"Import Data File\" goBack={this.props.goBack}>\n\n                <div className=\"panel-block\" style={{padding: \"3rem\"}}>\n                <div className=\"file is-boxed is-centered is-vcentered\">\n                    <label className=\"file-label\">\n                        <input className=\"file-input\" type=\"file\" ref={this.input} onChange={this.handleUpload} />\n                        <span className=\"file-cta\">\n                            <span className=\"file-icon\">\n                                <Icon icon={faUpload} />\n                            </span>\n                            <span className=\"file-label\">\n                                Choose a file…\n                            </span>\n                        </span>\n                    </label>\n                </div>\n                </div>\n\n            </ToolbarHeader>);\n    }\n}","import React from 'react';\nimport { IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport interface PanelItemProps {\n    onClick : () => void,\n    icon : IconDefinition,\n    text : string\n}\n\nexport interface Props {\n    heading : string,\n    panelItems : PanelItemProps[]\n}\n\n\nconst PanelItem = ({ onClick, icon, text } : PanelItemProps) => (\n    <label className=\"panel-block\" \n        onClick={onClick}>\n        <span className=\"panel-icon\">\n            <FontAwesomeIcon icon={icon} />\n        </span>\n        {text}\n    </label>\n)\n\nexport const Panel = ({ heading, panelItems } : Props) => (\n    <nav className=\"panel\">\n        <div className=\"panel-heading\">{heading}</div>\n\n        { \n            panelItems.map(props => \n                <PanelItem key={props.text} {...props} />\n            ) \n        }\n    </nav>\n)","import React from 'react';\nimport { faPlus, faExclamationTriangle, faMinusCircle } from '@fortawesome/free-solid-svg-icons'\nimport { Handler, Node } from '../../model';\nimport Icon from '../generic/Icon';\nimport ToolbarHeader from './ToolbarHeader';\n\ninterface Props {\n    oldState : Node,\n    onSubmit  : Handler<Node>,\n    onDelete? : Handler<any>,\n    goBack : Handler<any>,\n    title : string,\n    submitButtonText : string,\n}\n\ninterface State {\n    name : string,\n    noNameError : boolean,\n}\n\nexport default class EditNode extends React.Component<Props, State> {\n    constructor(props : Props) {\n        super(props);\n\n        this.state = { \n            name: this.props.oldState.name,\n            noNameError: false,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    // We implement this method in case the props change and we need to edit a\n    // different node.\n    componentDidUpdate(prevProps : Props) {\n        if (prevProps.oldState !== this.props.oldState) {\n            this.setState({ name : this.props.oldState.name, noNameError: false });\n        }\n    }\n    handleChange(event : React.ChangeEvent<HTMLInputElement>) {\n        const name = event.target.value;\n\n        this.setState({ \n            name: name, \n            noNameError: this.state.noNameError && name.trim() === '',\n        });\n    }\n    handleSubmit(event : React.FormEvent) {\n        event.preventDefault();\n\n        let error = false;\n        // Make sure the name is nonempty\n        if (this.state.name.trim() === '') {\n            this.setState({ noNameError: true });\n            error = true;\n        }\n        if (!error) {\n            this.props.onSubmit({\n                name: this.state.name.trim(),\n                coords: this.props.oldState.coords\n            });\n        }\n    }\n    render() {\n        return (\n        <ToolbarHeader title={this.props.title} goBack={this.props.goBack}>\n\n            <form className=\"panel-block\" onSubmit={this.handleSubmit} style={{display: \"block\"}}>\n            <div className=\"field\">\n                <label className=\"label\">Name</label>\n                <div className=\"control\">\n                    <input className=\"input\" placeholder=\"Node name\" type=\"text\" value={this.state.name} onChange={this.handleChange} />\n                </div>\n                {this.state.noNameError && \n                    <p className=\"help is-danger\">\n                        <Icon icon={faExclamationTriangle} />\n                        Please enter a name for the node.\n                    </p> \n                }\n            </div>\n\n            <div className=\"buttons\">\n            <button className=\"button is-primary is-fullwidth\">\n                <Icon icon={faPlus} />\n                <span>{this.props.submitButtonText}</span>\n            </button>\n\n            { this.props.onDelete &&\n                <button className=\"button is-hover is-danger is-outlined is-fullwidth\" \n                        type=\"button\" onClick={this.props.onDelete!}>\n                    <Icon icon={faMinusCircle} />\n                    <span>Delete Node</span>\n                </button>\n            }\n            </div>\n        </form>\n        </ToolbarHeader>);\n    }\n}","/**\n * This module defines a collection of different Toolbars. Crucially, each\n * Toolbar function should not contain side-effects, since it is an\n * ordinary React component. Side-effects like downloading a file should\n * be triggered by an *event* such as onClick, rather than be triggered\n * in the body of the function itself.\n */\n\nimport React from 'react';\nimport { Dispatch } from 'redux';\nimport { Model, Pathway, PathwayId, Node, Coords, NodeId } from '../model';\nimport EditPathway from './toolbars/EditPathway';\nimport SelectOrCreatePathway from './toolbars/SelectOrCreatePathway';\nimport { faBoxes, faBezierCurve, faEdit, faPlusCircle, faDownload, faUpload } from '@fortawesome/free-solid-svg-icons';\nimport { saveAs } from 'file-saver';\nimport ImportData from './toolbars/ImportData';\nimport ToolbarHeader from './toolbars/ToolbarHeader';\nimport { State } from './App';\nimport { connect } from 'react-redux';\nimport { Panel } from './generic/Panel';\nimport { Msg } from '../actions'\nimport EditNode from './toolbars/EditNode';\n\n \nexport type Mode \n    = { type : 'Home' }\n    | { type : 'SelectNodeLocation' }\n    | { type : 'CreatePathway' }\n    | { type : 'SelectPathwayToEdit' }\n    | { type : 'EditThisPathway', id : PathwayId }\n    | { type : 'ImportDataAction' }\n    | { type : 'CreateNode', coords : Coords }\n    | { type : 'EditNode', id : NodeId }\n    | { type : 'SelectPathwayForLink' }\n    | { type : 'CreateLink', pathway : PathwayId }\n\n\ninterface Props {\n    mode : Mode,\n    model : Model,\n    dispatch : Dispatch<Msg>\n}\n\nfunction stateToProps(state : State) {\n    return { mode : state.ui.toolbar, model : state.model.present };\n}\n\nfunction dispatchToProps(dispatch : Dispatch<Msg>) {\n    return { dispatch };\n}\n\n\n/**** Home toolbar ****/\n\nfunction _Home({ model, dispatch } : Props) {\n    const heading = \"Select an Action\";\n    const panelItems = [\n        {\n            text : \"Create Node\",\n            icon : faBoxes,\n            onClick : () => {\n                dispatch({ type : 'prompt to select a location for new node' });\n            }\n        },\n        {\n            text : \"Create Link\",\n            icon : faBezierCurve,\n            onClick : () => {\n                dispatch({ type : 'prompt to select a pathway for new links' })\n            }\n        },\n        {\n            text : \"Create Pathway\",\n            icon : faPlusCircle,\n            onClick : () => {\n                dispatch({ type : 'prompt to create a pathway' });\n            }\n        },\n        {\n            text : \"Edit Pathway\",\n            icon : faEdit,\n            onClick : () => {\n                dispatch({ type : 'prompt to select a pathway for editing' });\n            }\n        },\n        {\n            text : \"Import Data\",\n            icon : faUpload,\n            onClick : () => {\n                dispatch({ type : 'prompt to upload app state' });\n            }\n        },\n        {\n            text : \"Export Data\",\n            icon : faDownload,\n            onClick : () => downloadJSON(model)\n        }\n    ];\n\n    return <Panel heading={heading} panelItems={panelItems} />;\n}\n\nfunction downloadJSON<T>(json : T) {\n    const blob = new Blob([JSON.stringify(json, null, 2)], {type: \"application/json;charset=utf-8\"});\n    saveAs(blob, \"atlas.json\");\n}\n\nconst Home = connect(stateToProps, dispatchToProps)(_Home);\n\n\n/**** Workflow for the \"create node\" option ****/\n\nfunction _SelectNodeLocation({ dispatch } : Props) {\n    const goBack = () => {\n        dispatch({ type : 'go home' });\n    };\n    return <ToolbarHeader title=\"Place a Node\" goBack={goBack} />;\n}\n\nconst SelectNodeLocation = connect(stateToProps, dispatchToProps)(_SelectNodeLocation);\n\n\nfunction _CreateNode({ dispatch, coords } : Props & { coords : Coords }) {\n    const onSubmit = (node : Node) => {\n        dispatch({ type : 'create node', node });\n        dispatch({ type : 'go home' });\n    };\n    const goBack = () => {\n        dispatch({ type : 'go home' });\n    };\n\n    return <EditNode\n        title=\"Create Node\"\n        submitButtonText=\"Create\"\n        oldState={{ name: \"\", coords }}\n        onSubmit={onSubmit}\n        goBack={goBack}\n    />\n}\n\nconst CreateNode = connect(stateToProps, dispatchToProps)(_CreateNode);\n\n\nfunction _EditNodeToolbar({ dispatch, model, id } : Props & { id : NodeId }) {\n    const onSubmit = (node : Node) => {\n        dispatch({ type : 'update node', node, id });\n        dispatch({ type : 'go home' });\n    };\n    const goBack = () => {\n        dispatch({ type : 'go home' });\n    };\n    const onDelete = () => {\n        dispatch({ type : 'go home' });\n        dispatch({ type : 'delete node', id });\n    }\n    const node = model.nodes[id];\n\n    return <EditNode\n        title=\"Edit Node\"\n        submitButtonText=\"Update\"\n        oldState={node}\n        onSubmit={onSubmit}\n        goBack={goBack}\n        onDelete={onDelete}\n    />\n}\n\nconst EditNodeToolbar = connect(stateToProps, dispatchToProps)(_EditNodeToolbar);\n\n/**** Workflow for the \"create pathway\" option ****/\n\nfunction _CreatePathway({ model, dispatch } : Props) {\n    const onSubmit = (pathway : Pathway) => {\n        dispatch({ type : 'create pathway', pathway });\n        dispatch({ type : 'go home' });\n    };\n    const goBack = () => {\n        dispatch({ type : 'go home' });\n    };\n    return <EditPathway {...model} \n                onSubmit={onSubmit} \n                goBack={goBack}\n                title=\"Create a Pathway\"\n                submitButtonText=\"Create\" />\n}\n\nconst CreatePathway = connect(stateToProps, dispatchToProps)(_CreatePathway);\n\n\n/**** Workflow for the \"edit pathway\" option ****/\n\nfunction _SelectPathwayToEdit({ model, dispatch } : Props) {\n    const onSelect = (id : PathwayId) => {\n        dispatch({ type : 'prompt to edit pathway', id});\n    };\n    const goBack = () => {\n        dispatch({ type : 'go home' });\n    };\n    return <SelectOrCreatePathway \n                pathways={model.pathways} \n                goBack={goBack}\n                onSelect={onSelect} />;\n}\n\nconst SelectPathwayToEdit = connect(stateToProps, dispatchToProps)(_SelectPathwayToEdit);\n\n\nfunction _EditThisPathway({ model, dispatch, id } : Props & { id : PathwayId }) {\n    const onSubmit = (pathway : Pathway) => {\n        dispatch({ type : 'update pathway', id, pathway });\n        dispatch({ type : 'prompt to select a pathway for editing'});\n    };\n    const onDelete = () => {\n        dispatch({ type : 'delete pathway', id });\n        dispatch({ type : 'prompt to select a pathway for editing'});\n    };\n    const goBack = () => {\n        dispatch({ type : 'prompt to select a pathway for editing'});\n    };\n\n    return <EditPathway \n                oldState={model.pathways[id]}\n                onSubmit={onSubmit} \n                onDelete={onDelete}\n                goBack={goBack}\n                title=\"Edit Pathway\"\n                submitButtonText=\"Confirm changes\" />;\n}\n\nconst EditThisPathway = connect(stateToProps, dispatchToProps)(_EditThisPathway);\n\n\n/**** Workflow for the \"export data\" option ****/\n\nfunction _ImportDataAction({ model, dispatch } : Props) {\n    const onUpload = (model : Model) => {\n        dispatch({ type : 'set model', model });\n        dispatch({ type : 'go home' });\n    };\n    const goBack = () => {\n        dispatch({ type : 'go home' });\n    };\n\n    return <ImportData {...model} \n                goBack={goBack} \n                setModel={onUpload} />;\n}\n\nconst ImportDataAction = connect(stateToProps, dispatchToProps)(_ImportDataAction);\n\n\n/**** Workflow for the \"create link\" option ****/\n\nfunction _SelectPathwayForLink({ model, dispatch } : Props) {\n    const onSelect = (id : PathwayId) => {\n        dispatch({ type : 'prompt to select link source', pathway : id });\n    };\n    const goBack = () => {\n        dispatch({ type : 'go home' });\n    };\n    return <SelectOrCreatePathway \n                pathways={model.pathways} \n                goBack={goBack}\n                onSelect={onSelect} />;\n}\nconst SelectPathwayForLink = connect(stateToProps, dispatchToProps)(_SelectPathwayForLink);\n\n\nfunction _CreateLink({ dispatch, pathway } : Props & { pathway : PathwayId }) {\n    const goBack = () => {\n        dispatch({ type : 'go home' });\n    };\n    return <ToolbarHeader title=\"Create Links\" goBack={goBack} />;\n}\nconst CreateLink = connect(stateToProps, dispatchToProps)(_CreateLink);\n\n\n/***** Dispatch which toolbar to use *****/\n\nfunction _Toolbar({ mode } : Props) : JSX.Element {\n\n    switch (mode.type) {\n        case 'Home': \n            return <Home />;\n        case 'SelectNodeLocation':\n            return <SelectNodeLocation />;\n        case 'CreatePathway': \n            return <CreatePathway />;\n        case 'SelectPathwayToEdit':\n            return <SelectPathwayToEdit />;\n        case 'EditThisPathway': \n            return <EditThisPathway id={mode.id} />;\n        case 'ImportDataAction':\n            return <ImportDataAction />;\n        case 'CreateNode':\n            return <CreateNode coords={mode.coords} />;\n        case 'EditNode':\n            return <EditNodeToolbar id={mode.id} />;\n        case 'SelectPathwayForLink':\n            return <SelectPathwayForLink />;\n        case 'CreateLink':\n            return <CreateLink pathway={mode.pathway} />;\n    }\n}\n\nexport const Toolbar = connect(stateToProps, dispatchToProps)(_Toolbar);\n","import React from 'react';\nimport { faUndo, faRedo } from \"@fortawesome/free-solid-svg-icons\";\nimport Icon from \"./Icon\";\nimport { Handler } from \"../../model\";\n\ninterface Props<T> {\n    canUndo : boolean,\n    canRedo : boolean,\n    undo : Handler<any>,\n    redo : Handler<any>,\n    style : React.CSSProperties\n}\n\nexport default function UndoButtons<T>(props : Props<T>) {\n    return (\n        <div style={props.style}>\n            <div className=\"field has-addons\">\n            <p className=\"control\">\n                <button className=\"button\" \n                    onClick={props.undo}\n                    disabled={!props.canUndo}>\n                <span className=\"icon is-small\">\n                    <Icon icon={faUndo} />\n                </span>\n                <span>Undo</span>\n                </button>\n            </p>\n            <p className=\"control\">\n                <button className=\"button\" \n                    onClick={props.redo}\n                    disabled={!props.canRedo}>\n                <span className=\"icon is-small\">\n                    <Icon icon={faRedo} />\n                </span>\n                <span>Redo</span>\n                </button>\n            </p>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { Model } from '../model';\nimport Atlas, { State as AtlasMode } from './atlas/Atlas';\nimport { Toolbar, Mode as ToolbarMode } from './Toolbar';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport UndoButtons from './generic/UndoButtons';\nimport { Msg } from '../actions';\nimport { Undoable } from '../utils/history';\n\n\n/*************************** STATE ****************************/\n\nexport interface AppState {\n    readonly model : Undoable<Model>;\n}\n\nexport interface UIState {\n    readonly atlas : AtlasMode,\n    readonly toolbar : ToolbarMode\n}\n\nexport interface State extends AppState {\n    readonly ui : UIState\n}\n\n\n/*************************** APPLICATION ****************************/\n\ninterface Props {\n    state : State,\n    dispatch : Dispatch<Msg>\n}\n\nconst _App = ({ state, dispatch } : Props) => (\n    <div>\n\n        <Atlas\n            style = {{position: \"absolute\", height: \"100%\", width: \"100%\"}} \n            />\n\n        <div style={{position: \"fixed\", top: \"2rem\", left: \"1.5rem\", maxWidth: \"400px\"}}>\n            <Toolbar />\n        </div>\n\n        <UndoButtons\n            style   = {{position: \"fixed\", top: \"2rem\", right: \"1.5rem\"}}\n            undo    = {() => dispatch({ type : '@history/undo' })}\n            redo    = {() => dispatch({ type : '@history/redo' })}\n            canUndo = {state.model.past.length > 0}\n            canRedo = {state.model.future.length > 0}\n            />\n\n    </div>\n);\n\nconst App = connect(\n    (state : State) => { return { state } }, \n    (dispatch : Dispatch<Msg>) => { return { dispatch } }\n)(_App);\n\nexport default App;","import { Model, initialModel, createNode, createPathway, updatePathway, deletePathway, updateNode, deleteNode, createLink, updateLink, deleteLink } from \"../model\";\nimport { ModelMsg } from '../actions';\nimport { undoable } from \"../utils/history\";\n\nfunction _model(\n    model : Model | undefined = initialModel,\n    msg : ModelMsg\n) : Model {\n    switch (msg.type) {\n        case 'create node':\n            return createNode(msg.node, model);\n\n        case 'update node':\n            return updateNode(msg.id, msg.node, model)\n\n        case 'delete node':\n            return deleteNode(msg.id, model)\n\n        case 'create pathway':\n            return createPathway(msg.pathway, model);\n\n        case 'update pathway':\n            return updatePathway(msg.id, msg.pathway, model);\n\n        case 'delete pathway':\n            return deletePathway(msg.id, model);\n\n        case 'create link':\n            return createLink(msg.link, model);\n\n        case 'update link':\n            return updateLink(msg.id, msg.link, model);\n\n        case 'delete link':\n            return deleteLink(msg.id, model);\n\n        case 'set model':\n            return msg.model;\n\n        default:\n            return model;\n    }\n}\n\nexport const model = undoable({ limit : 50 }, _model)","import isEqual from 'lodash/isEqual';\n\n/**\n * Wraps a plain JSON object with undo/redo functionality\n */\nexport type Undoable<T> = {\n    present : T;\n    past    : T[];\n    future  : T[];\n}\n\nexport type UndoMsg\n    = { type : '@history/undo' }\n    | { type : '@history/redo' }\n\nexport type Config = {\n    limit : number\n}\n\n\n/**\n * Higher-order reducer for making the state undoable.\n */\nexport function undoable<State, Msg extends { type : string }>(\n    config : Config, \n    reducer : (state : State | undefined, msg : Msg) => State\n) \n: (state : Undoable<State> | undefined, msg : UndoMsg | Msg) => Undoable<State>\n{\n\n    /**\n     * If the undo history of the argument is nonempty, returns a *new* object\n     * whose current state is the top of the undo stack.\n     */\n    function undo<T>(data : Undoable<T>) : Undoable<T> | undefined {\n        if (data.past.length > 0) {\n            // Make a copy of 'redo' with the current model pushed onto it\n            const redo = data.future.slice();\n            redo.push(data.present);\n\n            // Make a copy of 'redo' with the new model popped from it\n            const undo = data.past.slice();\n            const model = undo.pop() as T;\n\n            return { present: model, past: undo, future: redo };\n        }\n    }\n\n    /**\n     * If the redo history of the argument is nonempty, returns a *new* object\n     * whose current state is the top of the redo stack.\n     * Otherwise, returns the same argument unchanged.\n     */\n    function redo<T>(data : Undoable<T>) : Undoable<T> | undefined {\n        if (data.future.length > 0) {\n            // Make a copy of 'undo' with the current model pushed onto it\n            const undo = data.past.slice();\n            undo.push(data.present);\n\n            // Make a copy of 'redo' with the new model popped from it\n            const redo = data.future.slice();\n            const model = redo.pop() as T;\n\n            return { present: model, past: undo, future: redo };\n        }\n    }\n\n    /**\n     * Transition the history to a new state; `present` gets added to the latest\n     * part of the `past` stack and the `future` is forgotten. Does not make a\n     * change if `nextState` is the same as `history.present`. States beyond\n     * `config.limit` are forgotten.\n     */\n    function setState<T>(_history : Undoable<T | undefined>, nextState : T) : Undoable<T> {\n        if (_history.present === undefined) {\n            return { past : [], future : [], present : nextState };\n        }\n        // Now assert that history must have been initialized\n        const history = _history as Undoable<T>;\n\n        // Don't add to history if the two objects are structurally identical\n        if (isEqual(nextState, history.present)) {\n            return history; \n        }\n        const overflow = history.past.length >= config.limit ? 1 : 0;\n        const past = history.past.concat([history.present]).slice(overflow)\n        const future : T[] = [];\n        const present = nextState;\n        return { past, present, future };\n    }\n\n\n    const initialState : Undoable<State | undefined> = {\n        past : [],\n        future : [],\n        present : undefined\n    };\n\n    return (\n        state : Undoable<State | undefined> | undefined = initialState,\n        msg : UndoMsg | Msg\n    ) => {\n        // We expect that undo/redo will not be invoked on an undefined initial state.\n        switch(msg.type) {\n            case '@history/undo':\n                return undo(state as Undoable<State>) || state as Undoable<State>;\n\n            case '@history/redo':\n                return redo(state) as Undoable<State> || state as Undoable<State>;\n\n            default:\n                // Initializes the undefined initial state\n                const nextState = reducer(state.present, msg as Msg);\n                return setState(state, nextState);\n        }\n    };\n}","import { Mode } from '../components/Toolbar';\nimport { UIMsg } from '../actions';\n\nexport const initialMode : Mode = { type : 'Home' };\n\nexport function toolbar(\n    mode : Mode | undefined = initialMode, \n    msg : UIMsg\n) : Mode {\n    switch (msg.type) {\n        case 'go home': \n            return { type : 'Home' };\n\n        case 'prompt to create a pathway': \n            return { type : 'CreatePathway' };\n\n        case 'prompt to select a pathway for editing':\n            return { type : 'SelectPathwayToEdit' };\n\n        case 'prompt to edit pathway':\n            return { type : 'EditThisPathway', id : msg.id };\n\n        case 'prompt to upload app state':\n            return { type : 'ImportDataAction' };\n\n        case 'prompt to select a location for new node':\n            return { type : 'SelectNodeLocation' };\n\n        case 'prompt to create node with coords':\n            return { type : 'CreateNode', coords : msg.coords };\n\n        case 'prompt to edit node':\n            return { type : 'EditNode', id : msg.id };\n\n        case 'prompt to select a pathway for new links':\n            return { type : 'SelectPathwayForLink' };\n\n        case 'prompt to select link source':\n            return { type : 'CreateLink', pathway : msg.pathway };\n\n        default:\n            return mode;\n    }\n}","import { State, Mode } from \"../components/atlas/Atlas\";\nimport { UIMsg, AtlasMsg } from \"../actions\";\nimport { PathwayId, PartialLink } from \"../model\";\n\nconst Normal : Mode = { type : 'Normal' };\n\nconst CreateNode : Mode = { type : 'CreateNode' };\n\nconst SelectLinkSource = (pathway : PathwayId) : Mode => \n    ({ type : 'SelectLinkSource', pathway });\n\nconst SelectLinkTarget = (link : PartialLink) : Mode => \n    ({ type : 'SelectLinkTarget', link });\n\n\nexport function atlas(\n    state : State | undefined = { mode : Normal },\n    msg : UIMsg | AtlasMsg\n) : State {\n    switch (msg.type) {\n        case 'go home':\n            return { ...state, mode : Normal };\n\n        case 'prompt to select a location for new node':\n            return { ...state, mode : CreateNode };\n\n        case 'prompt to create node with coords':\n            return { ...state, mode : Normal };\n\n        case 'set mouse position':\n            return { ...state, cursor : msg.coords };\n\n        case 'prompt to select link source':\n            return { ...state, mode : SelectLinkSource(msg.pathway) };\n\n        case 'prompt to select link target':\n            return { ...state, mode : SelectLinkTarget(msg.link) };\n\n        default:\n            return state;\n    }\n}","import { model } from './model';\nimport { toolbar } from './toolbar';\nimport { atlas } from './atlas';\nimport { combineReducers } from 'redux';\n\nexport const rootReducer = combineReducers({\n    model,\n    ui : combineReducers({ toolbar, atlas })\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App, { AppState } from './components/App';\nimport './style.scss';\nimport LocalDBFactory from './utils/persistence';\nimport { localDBName, persistDataTimeout } from './config';\nimport { rootReducer } from './reducers/rootReducer';\n\n\n/************ Local storage stuff **************/\n\n// Create a connection to local storage\nconst LocalDB = LocalDBFactory<AppState>(localDBName, persistDataTimeout);\n\n// Tries to initialize application state.\n// Reducers automatically populate the ui state.\nconst state = LocalDB.get();\n\n// Persists data to local storage\nconst onUpdate = () => {\n    const { model } = store.getState();\n    LocalDB.put({ model });\n}\n\n\n/************ Render the application ************/\n\nconst store = createStore(rootReducer, state);\nstore.subscribe(onUpdate);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />,\n    </Provider>, \n    document.getElementById(\"root\"));","\n/**\n * This is a wrapper class for persisting application state to the browser.\n * Instead of writing all the time, it schedules updates to take place. \n */\nexport default function<T>(DB_NAME : string, PERSIST_DATA_TIMEOUT : number) \n    : { put : (data : T) => void, get : () => T | undefined }\n{\n\n    let isDirty : Boolean = false;\n    let cache : T | null  = null;\n    \n    function persistData() {\n        localStorage.setItem(DB_NAME, JSON.stringify(cache));\n        isDirty = false;\n    }\n\n    function put(data : T) {\n        cache = data;\n        if (!isDirty) {\n            setTimeout(persistData, PERSIST_DATA_TIMEOUT);\n        }\n        isDirty = true;\n    }\n\n    function get() : T | undefined {\n        const savedState = localStorage.getItem(DB_NAME);\n\n        if (savedState === null) {\n            return undefined;\n        }\n        else {\n            return JSON.parse(savedState) as T;\n        }\n    }\n\n    return { put, get };\n}\n","/** This file defines configuration variables used throughout the application. */\n\nexport const localDBName = \"AppState\";\nexport const persistDataTimeout = 3000;\nexport const maxUndoSize = 50;"],"sourceRoot":""}